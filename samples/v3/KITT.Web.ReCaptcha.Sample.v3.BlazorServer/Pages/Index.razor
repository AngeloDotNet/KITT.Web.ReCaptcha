@page "/"
@using System.ComponentModel.DataAnnotations
@using KITT.Web.ReCaptcha.Blazor.v3

@inject Blazor.v3.ReCaptchaService ReCaptchaClient
@inject Http.v3.ReCaptchaService ReCaptchaHttp

<PageTitle>KITT ReCaptcha v3 - Blazor Server sample</PageTitle>

<h1>KITT ReCaptcha v3 - Blazor Server sample</h1>

@if (!string.IsNullOrWhiteSpace(message))
{
    <div class="row">
        <div class="col-md-12">
            <div class="alert @(isSuccessMessage ? "alert-success" : "alert-danger")" role="alert">
                <p>@message</p>
            </div>
        </div>
    </div>
}

<EditForm Model="model" role="form" OnValidSubmit="Submit">
    <DataAnnotationsValidator />

    <div class="mb-3">
        <label>Text</label>
        <InputTextArea @bind-Value="model.Text"
                       class="form-control"
                       tabindex="0" />
    </div>

    <div class="mb-3">
        <button type="submit" class="btn btn-primary">Click!</button>
    </div>
</EditForm>

@code {
    private ViewModel model = new();

    private string? message;

    private bool isSuccessMessage;

    private async Task Submit()
    {
        try
        {
            var reCaptchaClientResponse = await ReCaptchaClient.VerifyAsync(action: "submit");
            if (reCaptchaClientResponse.Succeeded)
            {
                var serverSideResponse = await ReCaptchaHttp.VerifyAsync(
                    reCaptchaClientResponse.Response,
                    action: "submit");

                if (serverSideResponse.Success)
                {
                    message = "reCaptcha validated successfully!";
                    isSuccessMessage = true;
                }
                else
                {
                    message = string.Join(",", serverSideResponse.ErrorCodes);
                    isSuccessMessage = false;
                }

            }
            else
            {
                message = reCaptchaClientResponse.Error;
                isSuccessMessage = false;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);

            message = $"[Exception {ex.GetType()}] {ex.Message}";
            isSuccessMessage = false;
        }
        finally
        {
            model = new();
        }
    }

    class ViewModel
    {
        [Required]
        public string Text { get; set; } = string.Empty;
    }
}
